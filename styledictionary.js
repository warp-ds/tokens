import StyleDictionary from "style-dictionary";
import fs from "fs";
import path from "path";

// Custom transform to preserve hex values with alpha exactly as they appear in the JSON
StyleDictionary.registerTransform({
  name: 'color/hexAlpha',
  type: 'value',
  matcher: function(prop) {
    return prop.attributes.category === 'color';
  },
  transformer: function(prop) {
    return prop.value; // Use the hex value exactly as it appears in the JSON
  }
});

// Custom format for SwiftUI and UIKit Colors combined in one file
StyleDictionary.registerFormat({
  name: 'combined-swiftui-uikit-color-format',
  formatter: function({ dictionary, file, options }) {
    const brandName = file.destination.split('/').pop().replace('Color.swift', ''); // Extract brand name from the file path

    // Remove "color" from the token name and ensure the hex value is exactly transferred (with alpha)
    const swiftUIColorBlock = dictionary.allProperties.map(token => {
      const nameParts = token.path.filter(part => part.toLowerCase() !== 'color'); // Remove 'color' from the name
      const name = nameParts.join(''); // Join remaining parts (e.g., blue50, white, etc.)
      return `    static let ${name} = Color(hex: "${token.value}")`;
    }).join('\n');

    const uiColorBlock = dictionary.allProperties.map(token => {
      const nameParts = token.path.filter(part => part.toLowerCase() !== 'color'); // Remove 'color' from the name
      const name = nameParts.join(''); // Join remaining parts (e.g., blue50, white, etc.)
      return `    static let ${name} = UIColor(hex: "${token.value}")`;
    }).join('\n');

    // Correct indentation and remove extra newlines at the beginning
    return `import SwiftUI

// Generated by https://github.com/warp-ds/tokens
struct ${brandName}Colors {
${swiftUIColorBlock}
}

struct ${brandName}UIColors {
${uiColorBlock}
}`;
  }
});

export function generateSDAssets() {
  const tokensPath = "./tokens";
  const brandModes = fs
    .readdirSync(tokensPath)
    .filter((item) => fs.statSync(path.join(tokensPath, item)).isDirectory());

  // Create output folder for iOS brand colors
  const outputFolder = `output/ios/Brands/`; // Ensure the trailing slash
  if (!fs.existsSync(outputFolder)) {
    fs.mkdirSync(outputFolder, { recursive: true });
    console.log(`Created output folder: ${outputFolder}`);
  }

  brandModes.forEach((brandMode) => {
    const brand = brandMode.split("-")[0]; // Extract the brand name (e.g., 'finn' from 'finn-light')
    const tokenFilePath = path.join(tokensPath, brandMode, "colors.json");

    // Check if colors.json exists before proceeding
    if (!fs.existsSync(tokenFilePath)) {
      console.error(`colors.json not found for ${brandMode} at path: ${tokenFilePath}`);
      return; // Skip this brand if colors.json does not exist
    } else {
      console.log(`Processing colors.json for ${brandMode}...`);
    }

    const iosConfig = {
      source: [tokenFilePath],
      platforms: {
        ios: {
          transformGroup: "ios-swift",
          buildPath: outputFolder, // Trailing slash ensures correct file paths
          files: [
            {
              destination: `${brand.charAt(0).toUpperCase() + brand.slice(1)}Color.swift`,
              format: "combined-swiftui-uikit-color-format",
              className: `${brand.charAt(0).toUpperCase() + brand.slice(1)}Colors`,
            }
          ],
          transforms: ["attribute/cti", "name/cti/pascal", "color/hexAlpha"] // Use custom hexAlpha transform
        },
      },
    };

    // Extend and build only for iOS platform
    try {
      const sd = StyleDictionary.extend(iosConfig);
      sd.buildPlatform('ios');
      console.log(`Successfully built iOS primitive colors for ${brandMode} in ${outputFolder}`);
    } catch (error) {
      console.error(`Error building iOS primitive colors for ${brandMode}:`, error);
    }
  });

  // Original platforms (CSS, Compose, etc.)
  brandModes.forEach((brandMode) => {
    const config = {
      source: [path.join(tokensPath, brandMode, "*.json")],
      platforms: {
        css: {
          transformGroup: "css",
          buildPath: `output/web/${brandMode}/`,
          files: [
            {
              destination: "variables.css",
              format: "css/variables",
              options: {
                outputReferences: true,
              },
            },
          ],
        },
        cssRgb: {
          transforms: [
            "attribute/cti",
            "name/cti/kebab",
            "time/seconds",
            "content/icon",
            "size/rem",
            "color/rgb",
          ],
          buildPath: `output/web/${brandMode}/`,
          files: [
            {
              destination: "variables-rgb.css",
              format: "css/variables",
              options: {
                outputReferences: true,
              },
            },
          ],
        },
        compose: {
          transformGroup: "compose",
          buildPath: `output/android/${brandMode}/`,
          files: [
            {
              destination: "StyleDictionaryColor.kt",
              format: "compose/object",
              className: "WarpColors",
              packageName: "com.schibsted.nmp.warp.theme",
            },
          ],
        },
      },
    };

    try {
      const sd = StyleDictionary.extend(config);
      sd.buildAllPlatforms();
      console.log(`Successfully built Style Dictionary for ${brandMode}`);
    } catch (error) {
      console.error(`Error building Style Dictionary for ${brandMode}:`, error);
    }
  });
}
